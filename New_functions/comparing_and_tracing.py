from clara.interpreter import getlanginter
import sys
import string

def compare_outputs(programs, inter,args, ins):
	# print("Arguements are : ", args)
	# print("The len :", len(programs))
	# inter = getlanginter(lang)
	# inter = inter('main')
	# trace = Interpreter.run(programs[0], args, ins)
	flag = 0 ### Needed because sometimes though output match for given test cases,
			 ### But for some unseen cases it might go wrong(because repair is generated)	
	if ins != None:
		for test_case in ins:
			# str(test_case)
			# print(test_case, "Type :", type(test_case))

			#NOTE: The index = len(programs)-1 is the index of incorrect program
			trace_incorrect = inter.run(programs[len(programs)-1], None, test_case, args)
			trace_correct = inter.run(programs[0], None, test_case, args)
			#Now compare outputs for each test cases and on encountering first mismatch return 
			### For multiple test cases it should be of form --ins "[[21,31],[44,43]]", here there are 2 test cases
			incorrect_ans = trace_incorrect[-1][2]["$out'"].replace('\\n',' , ').strip(' , ')
			correct_ans = trace_correct[-1][2]["$out'"].replace('\\n',' , ').strip(' , ')
			if correct_ans != incorrect_ans:
				flag = 1
				print("\n** The comparsion between ouptut generated by your code and the expected output **\n")
				print("Testcase for which you went wrong takes input :", test_case)
				print("The output of your program is :",incorrect_ans) 
				print("The correct output expected is :", correct_ans)
				print("----------------------------------------------------------------\n")
				break
		if flag == 0:
			print("Outputs match, but since repairs are generated, it might not work when passed through exhaustive test cases\n")
	else:
		print("There are no outputs printed, possibly the solution is just returned to function which calls\n")

def incorrect_return(clara_feedback, programs, inter, args, ins):
	### Use final return("$ret'") using trace to compare the incorrect and correct return values
	try:
		print("There is an incorrect value returned",end = ".")
		if ins != None:
			for test_case in ins:
				trace_incorrect = inter.run(programs[len(programs)-1], None, test_case, args)
				trace_correct = inter.run(programs[0], None, test_case, args)

				### The last trace of the function includes the final return value
				incorrect_return = trace_incorrect[-2][2]["$ret'"]
				correct_return = trace_correct[-2][2]["$ret'"]

				if correct_return != incorrect_return:
					funcName = trace_correct[-2][0]
					print("It is returned by the function named,",funcName )
					print("Testcase for which you went wrong is :", test_case)
					print("Your program is returning :",incorrect_return)
					print("But expected return value is :", correct_return)
					break

		elif args != None:
			for test_case in args:
				# print("testcase :", test_case)
				trace_incorrect = inter.run(programs[len(programs)-1],None, ins, test_case)
				trace_correct = inter.run(programs[0],None, ins , test_case)

				### The last trace of the function includes the final return value
				incorrect_return = trace_incorrect[-2][2]["$ret'"]
				correct_return = trace_correct[-2][2]["$ret'"]

				if correct_return != incorrect_return:
					funcName = trace_correct[-2][0]
					print("It is returned by the function named,",funcName )
					print("\nTestcase for which you went wrong is :", test_case)
					print("Your program is returning :",incorrect_return)
					print("But expected return value is :", correct_return)
					break

		print("--------------------------------------------------------------------------\n")
	except Exception as err:
		print("\nCouldn't generate trace for your program")
		print("We are printing the repairs generated\n")
		print("*",clara_feedback,"**\n")
		sys.exit("There might be other repairs too, but before looking at those include this repair")
